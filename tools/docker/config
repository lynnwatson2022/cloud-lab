#!/bin/sh
#
# config -- Configure the common variables
#

# debug with DEBUG=1
[ x$DEBUG = x"1" ] && set -x

[ -z "$TOP_DIR" ] && TOP_DIR=$(cd $(dirname $0)/../../ && pwd)
TOP_DIR=$(cd $(dirname $TOP_DIR/null) && pwd)

# Basic variables
HOST_USER=$USER
[ "x$HOST_USER" = "xroot" -a -n "$SUDO_USER" ] && HOST_USER=$SUDO_USER

HOST_OS=$(uname)

# Basic requirement: docker and let docker run without sudo
if [ ! -n "$IN_CONTAINER" ]; then
  DOCKER_INSTALL_CMD=$TOP_DIR/tools/docker/install
  $DOCKER_INSTALL_CMD >&2 || exit 1
  which groups >/dev/null 2>&1 && which usermod >/dev/null 2>&1 \
    && ((groups $HOST_USER | grep -q docker) || sudo usermod -aG docker $HOST_USER)
fi

[ -z "$TPROXY" ] && TPROXY=0
[ -z "$LAB_SECURITY" ] && LAB_SECURITY=0

# Variables need to pass to the container from our environment variables
VARS="UNIX_USER UNIX_PWD VNC_PWD VNC_PWD_VIEWONLY TPROXY VNC_SHARED SCREEN_SIZE HOST_NAME UNIX_IDENTIFY VNC_IDENTIFY SUDO_IDENTIFY VNC_IP VNC_TOKEN TPROXY_IP"

# Basic files/directories

LAB_HOST=$TOP_DIR/.host_name
LAB_OUTPUT=$TOP_DIR/output

GIT_DIR=$TOP_DIR/.git
GIT_WORKDIR=/.git

LAB_DIR=$TOP_DIR/labs
LAB_WORKDIR=/labs

TOOL_DIR=$TOP_DIR/tools
TOOL_WORKDIR=/tools

CONFIGS_DIR=$TOP_DIR/configs/
CONFIG_WORKDIR=/configs

# Some commands not require to specify the lab name
CMD=`basename $0`
echo "tproxy export choose unlock-all build-all pull-all git-pull-all push-all clean-all rm-all list release batch " | grep "$CMD "
[ $? -eq 0 ] && IGNORE_LAB_NAME=1

if [ -n "$IN_CONTAINER" ]; then
  LAB_DIR=$LAB_WORKDIR
  TOOL_DIR=$TOOL_WORKDIR
  CONFIG_DIR=$CONFIG_WORKDIR
else
  # Allow to pass lab name
  [ -z $CURRENT ] && CURRENT=$1
  LAB_CURRENT=$LAB_DIR/.current_lab

  [ -n "$CURRENT" ] && ls $CONFIGS_DIR | tr -s ' ' | tr ' ' '\n' | grep -q ^$CURRENT$
  if [ $? -eq 1 -o -z "$CURRENT" ]; then
    CURRENT=""
    if [ -f $LAB_CURRENT ]; then
      CURRENT=$(cat $LAB_CURRENT)
      LAB_CURRENT_DIR=$LAB_DIR/$CURRENT
    fi
  fi

  # Container don't need this CURRENT
  [ -z "$CURRENT" -a -z "$IGNORE_LAB_NAME" ] && echo "LOG: Current lab not specified" >&2 && exit 1
  [ -n "$CURRENT" ] && echo "LOG: Current Lab is $CURRENT" >&2

  CONFIG_DIR=$TOP_DIR/configs/$CURRENT
fi

CORE_SYSTEM_DIR=$TOOL_DIR/system

CONFIG_TOOL_DIR=$CONFIG_DIR/tools
CONFIG_DOCKER_DIR=$CONFIG_DIR/docker
CONFIG_SYSTEM_DIR=$CONFIG_DIR/system

DOCKER_DIR=$TOOL_DIR/docker
DOCKER_IDENTIFY_CMD=$DOCKER_DIR/identify
DOCKER_VNC_CMD=$DOCKER_DIR/vnc
DOCKER_RELEASE_CMD=$DOCKER_DIR/release
DOCKER_SSH_CMD=$DOCKER_DIR/ssh
DOCKER_WEBSSH_CMD=$DOCKER_DIR/webssh
DOCKER_EXPORT_CMD=$DOCKER_DIR/export
DOCKER_PUBLISH_CMD=$DOCKER_DIR/publish
DOCKER_TPROXY_CMD=$DOCKER_DIR/tproxy
DOCKER_CLEAN_CMD=$DOCKER_DIR/clean
DOCKER_RM_CMD=$DOCKER_DIR/rm
DOCKER_RUN_CMD=$DOCKER_DIR/run
DOCKER_STOP_CMD=$DOCKER_DIR/stop
DOCKER_START_CMD=$DOCKER_DIR/start
DOCKER_UNLOCK_CMD=$DOCKER_DIR/unlock
DOCKER_XTERM_CMD=$DOCKER_DIR/get_xterm
DOCKER_FILE=$CONFIG_DIR/Dockerfile

# Common variables

LAB_IMAGE=$CONFIG_DOCKER_DIR/name
LAB_ENVS=$CONFIG_DOCKER_DIR/envs
LAB_CAPS=$CONFIG_DOCKER_DIR/caps
LAB_DEVICES=$CONFIG_DOCKER_DIR/devices
LAB_LIMITS=$CONFIG_DOCKER_DIR/limits
LAB_PORTMAP=$CONFIG_DOCKER_DIR/portmap
LAB_VOLUMEMAP=$CONFIG_DOCKER_DIR/volumemap

LAB_WEB_BROWSER=$CONFIG_DOCKER_DIR/.web_browser
LAB_CONTAINER_NAME=$CONFIG_DOCKER_DIR/.container_name
LAB_CONTAINER_ID=$CONFIG_DOCKER_DIR/.container_id
LAB_HOST_NAME=$CONFIG_DOCKER_DIR/.host_name
LAB_UNIX_USER=$CONFIG_DOCKER_DIR/.unix_user
LAB_UNIX_PWD=$CONFIG_DOCKER_DIR/.unix_pwd
LAB_UNIX_UID=$CONFIG_DOCKER_DIR/.unix_uid
LAB_VNC_PWD=$CONFIG_DOCKER_DIR/.vnc_pwd
LAB_VNC_PWD_VIEWONLY=$CONFIG_DOCKER_DIR/.vnc_pwd_viewonly
LAB_VNC_IP=$CONFIG_DOCKER_DIR/.vnc_ip
LAB_VNC_TOKEN=$CONFIG_DOCKER_DIR/.vnc_token
LAB_TPROXY=$CONFIG_DOCKER_DIR/.tproxy
LAB_TPROXY_IP=$CONFIG_DOCKER_DIR/.tproxy
LAB_SCREEN_SIZE=$CONFIG_DOCKER_DIR/.screen_size
LAB_VNC_SHARED=$CONFIG_DOCKER_DIR/.vnc_shared
LAB_VNC_IDENTIFY=$CONFIG_DOCKER_DIR/.vnc_identify
LAB_UNIX_IDENTIFY=$CONFIG_DOCKER_DIR/.unix_identify
LAB_SUDO_IDENTIFY=$CONFIG_DOCKER_DIR/.sudo_identify

[ `id -u` -ne 0 ] && SUDO=sudo

# Lock the important files for security
__do_lock ()
{
  # echo "LOG: __do_lock"

  [ -d $CONFIG_DOCKER_DIR ] && \
    $SUDO find $CONFIG_DOCKER_DIR -iname ".[^.]*" -exec chmod -f -R a-rw {} \;
  which chattr >/dev/null 2>&1 && $SUDO chattr -R +i $CONFIGS_DIR
  which chattr >/dev/null 2>&1 && $SUDO chattr -R +i $TOOL_DIR
}

# Unlock the important files for configuration
__do_unlock ()
{
  # echo "LOG: __do_unlock"

  which chattr >/dev/null 2>&1 && $SUDO chattr -R -i $CONFIGS_DIR
  which chattr >/dev/null 2>&1 && $SUDO chattr -R -i $TOOL_DIR
  [ -d $CONFIG_DOCKER_DIR ] && \
    $SUDO find $CONFIG_DOCKER_DIR -iname ".[^.]*" -exec chmod -f -R 664 {} \;
}

do_lock ()
{
  [ $LAB_SECURITY -ge 1 ] && __do_lock
}

do_unlock ()
{
  [ $LAB_SECURITY -ge 1 ] && __do_unlock
}

# Variables initialization from config file if exist

LAB_VARS="IMAGE ENVS CAPS DEVICES LIMITS PORTMAP VOLUMEMAP"

LAB_VARS="$LAB_VARS WEB_BROWSER HOST"
LAB_VARS="$LAB_VARS CONTAINER_NAME CONTAINER_ID HOST HOST_NAME"
LAB_VARS="$LAB_VARS UNIX_USER UNIX_PWD VNC_PWD VNC_PWD_VIEWONLY TPROXY TPROXY_IP UNIX_UID UNIX_IDENTIFY VNC_IDENTIFY SUDO_IDENTIFY VNC_IP VNC_TOKEN"
LAB_VARS="$LAB_VARS VNC_SHARED SCREEN_SIZE"

do_unlock

# Prefer user input to the one saved in config file

for VAR in $LAB_VARS
do
  var_file=`eval echo \\${LAB_$VAR}`
  # Accesspt ENV
  var=`eval echo \\$${VAR}`

  # echo $VAR $var
  # echo "LOG: Get $VAR from $var_file"

  var_value=""
  [ -n "$var_file" -a -f "$var_file" -a -z "$var" ] && var_value='$(grep -v "#" $var_file)' && eval `eval echo \\$VAR='$var_value'`

  echo `eval echo "LOG: $VAR=\\$${VAR}"`
done

do_lock

# Default variables

if [ ! -n "$IN_CONTAINER" ]; then
  [ -z $HOST ] && HOST=localhost

  ## Get localhost address, for virtualbox, please enable: Network -> Adapter2 -> Host-only Adapter
  for eth in en0 eth1
  do
    ifconfig $eth >/dev/null 2>&1
    [ $? -ne 0 ] && continue
    LOCALHOST=`ifconfig $eth | grep 'inet ' | tr ':' ' ' | tr -s ' ' | tr ' ' '\n' | grep "[0-9\.]\{7,\}" | head -1`
    break
  done

  ## default terminal, lxterminal, terminator
  XTERM=`$DOCKER_XTERM_CMD lxterminal`
fi

## password
DEF_PWD_LENGTH=6
DEF_PWD_TOTAL=100

## tokens/ip
DEF_TOKEN_LENGTH=6
[ -z "$TOKEN_LENGTH" ] && TOKEN_LENGTH=$DEF_TOKEN_LENGTH
DEF_TOKEN_DIR=.vnc-tokens
DEF_VNC_IP="0.0.0.0"

## default encrypt command: use shasum instead of md5sum
which shasum >/dev/null 2>&1 && DEF_ENCRYPT_CMD=shasum
which sha1sum >/dev/null 2>&1 && DEF_ENCRYPT_CMD=sha1sum
[ -z "$ENCRYPT_CMD" ] && ENCRYPT_CMD=$DEF_ENCRYPT_CMD

[ -z "$RELEASE_DIR" ] && RELEASE_DIR=${TOP_DIR}/labs && mkdir -p $RELEASE_DIR
[ -z "$RELEASE_HTML" ] && RELEASE_HTML=index.html
[ -z "$RELEASE_FILE" ] && RELEASE_FILE=${RELEASE_DIR}/$RELEASE_HTML

## Security related
### 0: with root permission by default, sharable, for private usage
### 1: highest security level, ssl, encrypted, https, no root, no sudo, not sharable, for security product
### 2: second security level, nossl, not encrypted, http, no root, no sudo, not sharable, for normal product
### 3: third security leve, nossl, not encrypted, http, root available with sudo and password, sharable

if [ $LAB_SECURITY -eq 1 ]; then
  WEB_NOSSL=0
  WEB_ENCRYPT=1
  WEB_HTTP=https
  # Account password locked, forbid the identify
  DEF_UNIX_IDENTIFY=0
  # No sudo, no way to switch to root in clients
  DEF_SUDO_IDENTIFY=0
  [ -z "$VNC_SHARED" ] && VNC_SHARED=0
elif [ $LAB_SECURITY -eq 2 ]; then
  WEB_NOSSL=1
  WEB_ENCRYPT=0
  WEB_HTTP=http
  # Not locked
  DEF_UNIX_IDENTIFY=1
  # No sudo, no way to switch to root in clients
  DEF_SUDO_IDENTIFY=0
  [ -z "$VNC_SHARED" ] && VNC_SHARED=0
elif [ $LAB_SECURITY -eq 3 ]; then
  WEB_NOSSL=1
  WEB_ENCRYPT=0
  WEB_HTTP=http
  # Not locked
  DEF_UNIX_IDENTIFY=1
  # Can get root simply with sudo and password
  DEF_SUDO_IDENTIFY=1
  [ -z "$VNC_SHARED" ] && VNC_SHARED=1
else
  WEB_NOSSL=1
  WEB_ENCRYPT=0
  WEB_HTTP=http
  # Not locked
  DEF_UNIX_IDENTIFY=1
  # Can get root simply with sudo and no password
  DEF_SUDO_IDENTIFY=2
  [ -z "$VNC_SHARED" ] && VNC_SHARED=1
fi

## screen size
DEF_SCREEN_SIZE=1280x800

# 16:10: 640x480 800x480 1280x800 1440x900 1680x1050 1920x1200 2560x1600
# 16:9: 960x540 1280x720 1920x1080 2560x1440
which xrandr >/dev/null 2>&1
[ $? -eq 0 -a -z "$SCREEN_SIZE" ] && SCREEN_SIZE=`xrandr --current | grep "^ .*\*" | tr -s ' ' | cut -d' ' -f2 | head -1`
[ -z "$SCREEN_SIZE" ] && SCREEN_SIZE=$DEF_SCREEN_SIZE

## Image names
TPROXY_NAME=cloud-ubuntu-proxy_client_transparent
WPROXY_NAME=cloud-ubuntu-web

## Fixme: It is not possible to run here.
[ -z "$IMAGE" ] && IMAGE=tinylab/$CURRENT
LAB_USER=`dirname $IMAGE`
LAB_NAME=$CURRENT

# More variables

IMAGES=`find $CONFIGS_DIR -name "name" | xargs -I{} cat {} | sort -u`
LABS=`find ${LAB_DIR} -maxdepth 1 -mindepth 1 -type d | xargs -I{} basename {}`

if [ "x$HOST_OS" = "xDarwin" ]; then
  LOCAL_DESKTOP_SHORTCUT=~/Desktop/${CONTAINER_NAME}.command
else
  LOCAL_DESKTOP_SHORTCUT=~/Desktop/${CONTAINER_NAME}.desktop
fi

[ -d $CONFIG_SYSTEM_DIR ] \
  && REMOTE_DESKTOP_SHORTCUT=`find $CONFIG_SYSTEM_DIR -maxdepth 4 -name "lab.desktop"`

CONTAINER_VNC_PORT=6080
CONTAINER_SSH_PORT=22
CONTAINER_WEBSSH_PORT=443
[ -z "$HOST_VNC_PORT" ] && HOST_VNC_PORT=6080
[ -z "$HOST_SSH_PORT" ] && HOST_SSH_PORT=2222
[ -z "$HOST_WEBSSH_PORT" ] && HOST_WEBSSH_PORT=4433

LAB_HOST_RUN=$CONFIG_TOOL_DIR/host-run
LAB_CONTAINER_RUN=$CONFIG_TOOL_DIR/container-run

# Common functions

get_var () #VAR #defval
{
  local var_value
  local VAR
  local defval

  VAR=$1
  defval=$2

  var_file=`eval echo \\${LAB_$VAR}`
  var_value=""

  [ -n "$var_file" -a -f "$var_file" ] && var_value='$(cat $var_file)' && eval `eval echo \\$VAR='$var_value'`
  [ -z "$var_value" ] && eval `eval echo \\$VAR=$defval`

  #echo `eval echo "LOG: GET: $VAR=\\$${VAR}"`
}

set_var () #VAR
{
  local VAR
  local var
  local var_file

  VAR=$1

  var=`eval echo \\$${VAR} | egrep -v "^$|^ *$"`
  var_file=`eval echo \\${LAB_$VAR}`

  #echo "LOG: SET: Save '$var' to $var_file"

  if [ -n "$var" ]; then
    echo "$var" | tr ' ' '\n' > $var_file
  fi
}

do_op () #op $ARG $args
{
  local op
  local ARG
  local arg
  local args

  op=$1
  ARG=$2
  args=$3

  arg=`eval echo \\$${ARG}`

  [ -z "$arg" ] && echo "LOG: '$ARG' required for '$op'" && exit 1

  echo "LOG: Running ' $op $arg $args'"

  eval $op $arg $args
}

get_random ()
{
  random=$RANDOM
  if [ -n "$random" ]; then
      echo $random
  else
      random=`date '+%s'`
      echo $(( random % 65535 ))
  fi
}

get_random_pwd ()
{
  which pwgen >/dev/null 2>&1 && pwgen -c -n -s -1 50 && exit 0

  random=$RANDOM
  [ -z "$random" ] && random=`date '+%s'`

  echo $((random % 89273831 * 513793917553423 / 3)) | bc
}

get_browser ()
{
  # Get the best web browser for different system
  macos_chrome='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
  macos_safari=/Applications/Safari.app/Contents/MacOS/Safari
  macos_firefox=/Applications/Firefox.app/Contents/MacOS/firefox
  linux_chrome=chromium-browser
  linux_firefox=firefox

  DEF_WEB_BROWSER=firefox
  if [ "x$HOST_OS" = "xDarwin" ]; then
    [ -f "$macos_safari" ] && DEF_WEB_BROWSER="$macos_safari"
    [ -f "$macos_firefox" ] && DEF_WEB_BROWSER="$macos_firefox"
    [ -f "$macos_chrome" ] && DEF_WEB_BROWSER="$(echo $macos_chrome | tr ' ' '-')"
  else
    which $linux_firefox >/dev/null 2>&1 && DEF_WEB_BROWSER=$linux_firefox
    which $linux_chrome >/dev/null 2>&1 && DEF_WEB_BROWSER=$linux_chrome
  fi

  do_unlock
  [ -z "$WEB_BROWSER" ] && get_var WEB_BROWSER $DEF_WEB_BROWSER
  do_lock

  if [ "x$HOST_OS" = "xDarwin" ]; then
    WEB_BROWSER="$(echo $WEB_BROWSER | tr '-' ' ')"
    if [ ! -f "$WEB_BROWSER" ]; then
      web_browser=`ls /Applications/*/Contents/MacOS/* | grep -i "$WEB_BROWSER$"`
      if [ $? -eq 0 ]; then
        WEB_BROWSER="$web_browser"
      else
        echo "LOG: No $WEB_BROWSER found, use safari instead." && WEB_BROWSER=$macos_safari
      fi
    fi
  else
    which $WEB_BROWSER >/dev/null 2>&1
    if [ $? -eq 1 ]; then
      echo "LOG: No $WEB_BROWSER found, use firefox instead."
      WEB_BROWSER=firefox
    fi
  fi

  __WEB_BROWSER=$WEB_BROWSER

  if [ "x$HOST_OS" = "xDarwin" ]; then
    __WEB_BROWSER="/usr/bin/open -a '$WEB_BROWSER'"
  fi
}

get_labs ()
{
  local tmp=`mktemp`
  local list=$1

  $list | grep "$LAB_NAME" | grep -v "LOG:" | sort -t ' ' -k 5 > $tmp

  cat $tmp | awk 'BEGIN{FS=" "}{ \
	printf("Lab: %s, User: %s\n", $11, $2); \
	printf("  * VNC (Normal): '$WEB_HTTP'://%s:%s/?u=%s&p=%s\n", $3, $4, $5, $6); \
	printf("  * VNC   (View): '$WEB_HTTP'://%s:%s/?r=%s%s\n", $3, $4, $5, $7); \
	printf("  * SSH    (Web): '$WEB_HTTP'://%s:%s/?ssh=ssh://%s:%s@%s:22\n", $3, $9, $2, $10, $8); \
	}'

  cat << EOF > $RELEASE_FILE
<html>
<body>
<head>
<style type="text/css">
  body { width: 100%; height: 500px; margin-bottom: 16px; overflow: auto; }
  a { text-decoration: none; outline: none; }
  p { text-align: center; font-size: 90%; }
  table { border: 1px solid #333; border-spacing: 0; border-collapse: collapse; width: 100%; }
  th, td { padding-left: 2px; padding-right: 2px; padding-top: 10px; padding-bottom: 10px;
     border: 1px solid #aaa; display: table-cell;
     text-align: center; max-width: 100px; }
  td { font-size: 80%; overflow: hidden; text-overflow: ellipsis }
  tr.head { background-color: #ccc; }
  tr.odd { background-color: #eee; }
  tr.even { background-color: #fff; }
</style>
<meta charset="UTF-8"> 	\
<title>Cloud Lab | 泰晓实验云台</title>
</head>
<h1><a target="_blank" href="${WEB_HTTP}://${HOST}:6080">Cloud Lab | 泰晓实验云台<a/></h1>
<br>
<table>
<tr class="head"><td>Lab</td><td>VNC (Normal)</td><td>VNC (View)</td><td>SSH (Web)</td></tr>
EOF

  cat $tmp | awk 'BEGIN {FS=" "; }{ 			\
	printf("<tr class=\"%s\">\n", (FNR%2 == 0) ? "odd" : "even"); \
	printf("<td>%s</td>\n", $1); \
	printf("  <td><a target=\"_blank\" href=\"'$WEB_HTTP'://%s:%s/?u=%s&p=%s\">Login</a></td>\n", \
		$3, $4, $5, $6); \
	printf("  <td><a target=\"_blank\" href=\"'$WEB_HTTP'://%s:%s/?r=%s%s\">Login</a></td>\n", \
		$3, $4, $5, $7); \
	printf("  <td><a target=\"_blank\" href=\"'$WEB_HTTP'://%s:%s/?ssh=ssh://%s:%s@%s:22\">Login</a></td>\n", \
		$3, $9, $2, $10, $8); \
	printf("</tr>\n"); \
     }' >> $RELEASE_FILE

  cat <<EOF >> $RELEASE_FILE
</table>
<p>Powered by <a target="_blank" href="http://tinylab.org/cloud-lab">Cloud Lab</a>,<br>
© 2017 <a target="_blank" href="http://tinylab.org">泰晓科技</a>, All Rights Reserved.</p>
</body>
</html>
EOF

  sync

  rm $tmp
}
